import java.util.Random;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Stream;
import java.util.stream.IntStream;


/**
 * Bulls and Cows game.
 * As described on the
 * <a href="https://en.wikipedia.org/wiki/Bulls_and_Cows">Wikipedia article</a>.
 *
 * The machine generates a 4-digits random number (the code), where no digit is
 * repeated. The player must deduce said number. After typing a guess, the
 * machine gives feedback:
 * <ul>
 *     <li>Bull: A digit is correct and in the right position.</li>
 *     <li>Cow: A digit is correct but not in the right position.</li>
 * </ul>
 *
 * @author juan70
 */
public class BullsAndCows {
    /**
     * Number of digits for the number to be guessed.
     */
    public static final int DIGITS = 4;


    /**
     * The secret code generated by the program and that the player must
     * eventually guess.
     */
    private String code = "";


    /**
     * Getter for the code.
     * @return  the code generated by the constructor when the object was created.
     */
    public String getCode() {
        return code;
    }


    /**
     * Create a BullsAndCows object, and generate a random code.
     */
    public BullsAndCows() {
        Random rnd = new Random();
        Set<Integer> digits = new HashSet<>(DIGITS);

        while (digits.size() < DIGITS) {
            digits.add(Math.abs(rnd.nextInt() % 10));
        }

        code = digits.stream()
               .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
               .toString();

        // Optional: Add a bit more of randomness...
        code = shuffle(code);
    }


    /**
     * Shuffle the contents of a string.
     *
     * @param  str  a string whose characters must be shuffled.
     * @return  a string with the same characters as in the original one, but in
     *          a different order.
     */
    private String shuffle(String str) {
        Random rnd = new Random();
        char[] shuffled = str.toCharArray();

        for (int i = 0; i < 100; i++) {  // 100 should be enough...
            int idx1 = rnd.nextInt(shuffled.length);
            int idx2 = rnd.nextInt(shuffled.length);

            // swap 'em
            char tmp = shuffled[idx1];
            shuffled[idx1] = shuffled[idx2];
            shuffled[idx2] = tmp;
        }

        return new String(shuffled);
    }


    /**
     * Compute the number of Bulls.
     *
     * @param  guess  the string typed by the player.
     * @return  number of bulls found by comparing guess and code, that is
     *          number of matching digits at the same place in both strings.
     */
    public int getBulls(String guess) {
        return IntStream.range(0, code.length())
               .map( i -> guess.charAt(i) == code.charAt(i) ? 1 : 0 )
               .sum();
    }


    /**
     * Compute the number of Cows.
     *
     * @param  guess  the string typed by the player.
     * @return  number of cows found by comparing guess} and code,
     *          that is number of matching digits at different places in both
     *          strings.
     */
    public int getCows(String guess) {
        return IntStream.range(0, code.length())
               .map( i -> guess.charAt(i) != code.charAt(i)
                     && code.contains("" + guess.charAt(i)) ? 1 : 0 )
               .sum();
    }
}

